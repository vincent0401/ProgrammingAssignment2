## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y             #y assigned to x
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse  #set the inverse
getmean <- function() m               #get the inverse
list(set = set, get = get,    #a list contained four
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {    #如果x已經有算好的平均值m
message("getting cached data")
return(m)        #則直接傳回m
}
data <- x$get()      #否則會計算數據的平均值
m <- solve(data, ...)  #並由setmean函數在緩存中設定平均值
x$setinverse(m)
m
}
makeCacheMatrix(x=matrix(1:4,nrow=2))
x=matrix(1:4,nrow=2)
x
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y             #y assigned to x
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse  #set the inverse
getinverse <- function() m               #get the inverse
list(set = set, get = get,    #a list contained four
setinverse = setinverse,
getinverse = getinverse)
}
x=matrix(1:4,nrow=2)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix(x)
solve(x)
x
x=matrix(1:4,nrow=2)
c<-makeCacheMatrix(x)
cacheSolve(c)
cacheSolve(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y             #y assigned to x
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse  #set the inverse
getinverse <- function() m               #get the inverse
list(set = set, get = get,    #a list contained four
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {    #如果x已經有算好的平均值m
message("getting cached data")
return(m)        #則直接傳回m
}
data <- x$get()      #否則會計算數據的平均值
m <- solve(data, ...)  #並由setmean函數在緩存中設定平均值
x$setinverse(m)
m
}
x=matrix(1:4,nrow=2)
c<-makeCacheMatrix(x)
cacheSolve(c)
